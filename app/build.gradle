apply plugin: 'com.android.model.application'

def platform = "armeabi"

model {
    repositories {
        libs(PrebuiltLibraries) {
            avcodec {
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("src/ffmpeg/${platform}/lib/libavcodec.a")
                }
            }
            avformat {
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("src/ffmpeg/${platform}/lib/libavformat.a")
                }
            }
            avutil {
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("src/ffmpeg/${platform}/lib/libavutil.a")
                }
            }
            swresample {
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("src/ffmpeg/${platform}/lib/libswresample.a")
                }
            }
            ffmpeg {
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("src/ffmpeg/${platform}/lib/libffmpeg.a")
                }
            }
            crypto {
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("src/ffmpeg/${platform}/lib/libcrypto.a")
                }
            }
            ssl {
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file("src/ffmpeg/${platform}/lib/libssl.so")
                }
            }
        }
    }

    android {
        compileSdkVersion 23
        buildToolsVersion "23.0.2"

        defaultConfig.with {
            applicationId "com.localytics.android.itracker"
            minSdkVersion.apiLevel = 18
            targetSdkVersion.apiLevel = 23
            versionCode 1
            versionName "1.0"
        }
    }

    android.ndk {
        moduleName = "media_player"
//        toolchain "clang"
//        toolchainVersion "3.5"
        // CFlags is configured in similar way as cppFlags
        CFlags.add("-I${file("src/main/jni/native_app_glue")}".toString())
        cppFlags.add("-I${file("src/ffmpeg/${platform}/include")}".toString())
        cppFlags.addAll(["-fno-exceptions", "-frtti"])
        ldFlags.add("-I${file("ffmpeg/${platform}/lib")}".toString())
        ldLibs.addAll(["android", "EGL", "GLESv1_CM", "dl", "log", "z"])
        stl = "stlport_static"
    }

    android.sources {
        main {
            jni {
                dependencies {
                    library "avcodec" linkage "static"
                    library "avformat" linkage "static"
                    library "avutil" linkage "static"
                    library "swresample" linkage "static"
                    library "ffmpeg" linkage "static"
                    library "crypto" linkage "static"
                    library "ssl"
                }
            }
        }
    }

    android.productFlavors {
        // for detailed abiFilter descriptions, refer to "Supported ABIs" @
        // https://developer.android.com/ndk/guides/abis.html#sa
        create("armeabi") {
            ndk.abiFilters.add("armeabi")
        }
        create("armeabi-v7a") {
            ndk.abiFilters.add("armeabi-v7a")
        }
        create("arm64-v8a") {
            ndk.abiFilters.add("arm64-v8a")
        }
        create("x86") {
            ndk.abiFilters.add("x86")
        }
        create("x86_64") {
            ndk.abiFilters.add("x86_64")
        }
        create("mips") {
            ndk.abiFilters.add("mips")
        }
        create("mips64") {
            ndk.abiFilters.add("mips64")
        }
        // To include all cpu architectures, leaves abiFilters empty
        create("fat")
    }

    android.dexOptions {
        incremental true
        javaMaxHeapSize "4g"
    }

    android.packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }
}



dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:support-v4:23.2.0'
    compile 'com.android.support:cardview-v7:23.2.0'
    compile 'com.android.support:recyclerview-v7:23.2.0'
    compile 'com.android.support:appcompat-v7:23.2.0'
    compile 'com.android.support:design:23.2.0'
    compile 'com.google.code.gson:gson:2.3.1'
    compile 'org.apache.directory.studio:org.apache.commons.io:2.4'
    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'com.opencsv:opencsv:3.5'
    compile 'joda-time:joda-time:2.9.1'
    compile 'com.google.android.gms:play-services-base:8.4.0'
    compile 'com.google.android.gms:play-services-gcm:8.4.0'
    compile 'com.google.android.gms:play-services-auth:8.4.0'
    compile 'com.google.android.gms:play-services-maps:8.4.0'
    compile 'com.google.android.gms:play-services-location:8.4.0'
    compile 'com.google.android.gms:play-services-drive:8.4.0'
    compile 'org.igniterealtime.smack:smack-android:4.2.0-alpha3'
    compile 'com.android.support:support-v13:23.2.0'
    compile 'org.jbundle.util.osgi.wrapped:org.jbundle.util.osgi.wrapped.org.apache.http.client:4.1.2'
    compile 'com.github.bumptech.glide:glide:3.7.0'
    compile 'com.amazonaws:aws-android-sdk-core:2.2.12'
    compile 'com.amazonaws:aws-android-sdk-cognito:2.2.12'
    compile 'com.amazonaws:aws-android-sdk-s3:2.+'
    compile 'com.amazonaws:aws-android-sdk-ddb:2.+'
}